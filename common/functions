#!/usr/bin/env bash
set -euo pipefail

function domain() {

    if [ "$1" == "tst" ]; then

        # Servidor do lab
        export LAB_DOMAIN=test.labqs.ita.br
        export CI_LAB_DOMAIN=ci.test.labqs.ita.br
        export CM_LAB_DOMAIN=cm.test.labqs.ita.br
        export IA_LAB_DOMAIN=ia.labqs.ita.br
        export ST_LAB_DOMAIN=st.test.labqs.ita.br
        export ST_C_LAB_DOMAIN=st.c.test.labqs.ita.br

    elif [ "$1" == "dev" ]; then

        # Servidores de desenvolvimento e testes
        export LAB_DOMAIN=dev.labqs.ita.br
        export CI_LAB_DOMAIN=ci.labqs.ita.br
        export CM_LAB_DOMAIN=cm.labqs.ita.br
        export IA_LAB_DOMAIN=ia.labqs.ita.br
        export ST_LAB_DOMAIN=st.labqs.ita.br
        export ST_C_LAB_DOMAIN=st.c.labqs.ita.br

    elif [ "$1" == "hom" ]; then

        # Servidores de homologação
        export LAB_DOMAIN=labqs.ita.br
        export CI_LAB_DOMAIN=ci.labqs.ita.br
        export CM_LAB_DOMAIN=cm.labqs.ita.br
        export IA_LAB_DOMAIN=ia.labqs.ita.br
        export ST_LAB_DOMAIN=st.labqs.ita.br
        export ST_C_LAB_DOMAIN=st.c.labqs.ita.br

    elif [ "$1" == "ia" ]; then

        # Servidor do lab
        export LAB_DOMAIN=ia.labqs.ita.br
        export CI_LAB_DOMAIN=ci.labqs.ita.br
        export CM_LAB_DOMAIN=cm.labqs.ita.br
        export IA_LAB_DOMAIN=ia.labqs.ita.br
        export ST_LAB_DOMAIN=st.labqs.ita.br
        export ST_C_LAB_DOMAIN=st.c.labqs.ita.br

    else

        echo "Argumento $1 incorreto. Use [ dev | tst | hom | ia ]"

        exit 1

    fi

}


function vault() {

    cd ../vault
    echo '* Vault *'

    if [ $2 = 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 24) > .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml up --detach
    
}

function traefik() {

    cd ../traefik
    echo '* Traefik *'

    if [ $2 = 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    fi

    sed -i 's\@SVC_KEY\'$(docker run --rm --entrypoint htpasswd httpd -nb admin $(awk -F'=' '$1 =="SVC_PWD" {print $2}' ./.env))'\g' config/traefik_dynamic.toml

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function httpd() {

    cd ../httpd
    echo '* Apache HTTPD *'

    echo "Registrar domínios $(tput setaf 1)"$LAB_DOMAIN"$(tput sgr0)"

    if [ "$1" == "hom" ] || [ "$1" == "ia" ]; then

        echo "Desabilitar proxy para "$CI_LAB_DOMAIN" e "$CM_LAB_DOMAIN

        rm panel/config/sites/001-ci.conf || true
        rm panel/config/sites/002-cm.conf || true

    elif [ "$1" == "dev" ] || [ "$1" == "ia" ]; then

        echo "Desabilitar proxy para "$ST_LAB_DOMAIN

        rm panel/config/sites/003-st.conf || true
        rm panel/config/sites/004-st.c.conf || true

    fi

    echo 'Certificar que certbot está parado'
    docker stop certbot || true

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

    docker stop httpd
    docker start httpd

}

function postgres() {

    cd ../postgresql
    echo '* PostgreSQL *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
        echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env
        echo 'SVC_PWD_03='$(openssl rand -hex 8) >> .env

        echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env) > ./postgres/config/.pgpass
        chmod 0600 ./postgres/config/.pgpass
        echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD_01" {print $2}' .env) > ./postgres01/config/.pgpass
        chmod 0600 ./postgres01/config/.pgpass
        echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD_02" {print $2}' .env) > ./postgres02/config/.pgpass
        chmod 0600 ./postgres02/config/.pgpass
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function mongodb() {

    cd ../mongodb
    echo '* MongoDB *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env

        echo 'uri: "mongodb://root:'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env)'@localhost:27017"' > ./mongodb/config/.mdbpass
        chmod 0600 ./mongodb/config/.mdbpass
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function mariadb() {

    cd ../mariadb
    echo '* MariaDB *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env

        echo '[client]' > mariadb/config/autologin.cnf
        echo 'user = root' >> mariadb/config/autologin.cnf
        echo 'password = '$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env) >> mariadb/config/autologin.cnf
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function redis() {

    cd ../redis
    echo '* Redis *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
        echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function etcd() {

    cd ../etcd
    echo '* Etcd *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function rabbitmq() {

    cd ../rabbitmq
    echo '* RabbitMQ *'

    if [ $2 == 'Y' ]; then
         echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    fi

    sed -i 's/@SVC_PWD/'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env)'/g' config/rabbitmng/20-user.conf

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function nextcloud() {

    cd ../nextcloud
    echo '* Nextcloud *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'REDIS_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../redis/.env) >> .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function hasura() {

    cd ../hasura
    echo '* Hasura *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 16) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function agent() {

    cd ../portainer
    echo '* Portainer *'

    docker compose -f agent.yaml -f ../common/networks.yaml up  --detach

}

function jupyter() {

    cd ../jupyter
    echo '* Jupyter Notebook *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'SVC_DEV_PWD='$(openssl rand -hex 8) >> .env
    fi

    cd stacks

    cd docker-stacks-foundation
    docker build --tag labqs/docker-stacks-foundation --rm .

    cd ../base-notebook
    docker build --tag labqs/base-notebook --rm .

    cd ../minimal-notebook
    docker build --tag labqs/minimal-notebook --rm .

    cd ../scipy-notebook
    docker build --tag labqs/scipy-notebook --rm .

    cd ../tensorflow-notebook
    docker build --tag labqs/tensorflow-notebook --rm .

    cd ../..

    docker build --tag labqs/jupyterlab --file Dockerfile.jupyterlab --rm .
    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --build --detach jupyter

}

function gitea() {

    cd ../gitea
    echo '* Gitea *'

    if [ $2 == 'Y' ]; then
        echo "Navegar até a página de configuração do serviço https://$LAB_DOMAIN/git"
        echo 'e definir a conta do administrador (no final da página, em "Optional Settings")'

        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) > .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function drone() {

    
    cd ../drone
    echo '* Drone *'

    if [ $2 == 'Y' ]; then
        echo "Gere uma aplicação OAuth no Gitea para o Drone em https://$LAB_DOMAIN/git"
        echo "com endereço de retorno https://$CI_LAB_DOMAIN/login"
        echo 'Após gerar a aplicação informe os dados abaixo'
        read -p 'Informe o "Client ID": ' GID
        read -p 'Informe o "Client Secret": ' GSCRT

        echo 'DRONE_TOKEN='$(openssl rand -hex 32) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
        echo 'GITEA_ID='$GID >> .env
        echo 'GITEA_PWD='$GSCRT >> .env
        echo 'SVC_PWD='$(openssl rand -hex 16) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --scale docker=2 --scale ssh=2 --detach --remove-orphans

}

function semaphore() {

    cd ../semaphore
    echo '* Ansible Semaphore *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --build --detach

}

function registry() {

    cd ../registry
    echo '* registry *'

    if [ $2 == 'Y' ]; then
        echo 'REGISTRY_HTTP_SECRET='$(openssl rand -hex 8) > .env

        mkdir -p ./auth
        docker run --rm --entrypoint htpasswd httpd -Bbn maint $(awk -F'=' '$1 =="REGISTRY_HTTP_SECRET" {print $2}' ./.env) > ./auth/htpasswd
    fi

    sed -i 's/@LAB_DOMAIN/'$LAB_DOMAIN'/g' config/config.yml
    sed -i 's/@REDIS_PWD/'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../redis/.env)'/g' config/config.yml

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function locust() {

    cd ../locust
    echo '* Locust *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --scale slave=2 --detach --remove-orphans
    docker stop $(docker ps -qa -f 'name=locust*')

}

function redmine() {

    cd ../redmine
    echo '* Redmine *'

    if [ $2 == 'Y' ]; then
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) > .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function prometheus() {

    cd ../prometheus
    echo '* Prometheus *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function grafana() {

    cd ../grafana
    echo '* Grafana *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function netdata() {

    cd ../netdata
    echo '* Netdata *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach
    
}

function portainer() {

    cd ../portainer
    echo '* Portainer *'

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function labelstudio() {

    cd ../labelstudio
    echo '* Label-Studio *'

    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
    fi

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}

function minio() {

    cd ../minio
    echo '* MinIO Service *'

 
    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    fi

    docker ps -qa -f 'name=minio*' | xargs -r docker stop
    docker ps -qa -f 'name=minio*' | xargs -r docker rm

    docker compose -f stack.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach
    
}

function console() {

    cd ../minio
    echo '* MinIO Console *'

 
    if [ $2 == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'SVC_PBKDF_SALT='$(openssl rand -hex 12) >> .env
    fi

    docker compose -f console.yaml -f ../common/networks.yaml -f ../common/volumes.$1.yaml up --detach

}
