#!/usr/bin/env bash
set -euo pipefail


if [[ $# -ne 1 && $# -ne 2 ]]; then

    echo "Informe [ dev | tst | hom ]"

    exit 1

elif [ "$1" == "tst" ]; then

    # Servidor do lab
    export LAB_DOMAIN=test.labqs.ita.br
    export CI_LAB_DOMAIN=ci.test.labqs.ita.br
    export CM_LAB_DOMAIN=cm.test.labqs.ita.br

elif [ "$1" == "dev" ]; then

    # Servidores de desenvolvimento e testes
    export LAB_DOMAIN=dev.labqs.ita.br
    export CI_LAB_DOMAIN=ci.labqs.ita.br
    export CM_LAB_DOMAIN=cm.labqs.ita.br

elif [ "$1" == "hom" ]; then

    # Servidores de homologação
    export LAB_DOMAIN=labqs.ita.br
    export CI_LAB_DOMAIN=ci.labqs.ita.br
    export CM_LAB_DOMAIN=cm.labqs.ita.br
    
else

    echo "Argumento $1 incorreto. Use [ dev | tst | hom ]"

    exit 1

fi

CONFIG_ENV="N"

if [ $# -eq 2 ]; then
    if [ "$2" == "config" ]; then
        echo "$(tput setaf 1)Configurando ambientes$(tput sgr0)"
        read -p "Confirme [S/N]: " -n1 CONFIG_OPT
        CONFIG_OPT=${CONFIG_OPT:-N}
        if [[ $CONFIG_OPT =~ ^[Ss]$ ]]; then
            echo 'Todos os ambientes serão configurados'
            CONFIG_ENV="Y"
        fi
    else

        echo "Argumento $2 incorreto. Use [ config ]"

        exit 2
        
    fi

else

    echo "$(tput setaf 1)Atualizando ambientes sem reconfigurar$(tput sgr0)"

fi

source ./config

echo "Registrar domínios $(tput setaf 1)"$LAB_DOMAIN"$(tput sgr0)"

sed -i 's/@CI_LAB_DOMAIN/'$CI_LAB_DOMAIN'/g' ../httpd/panel/static/index.html
sed -i 's/@CM_LAB_DOMAIN/'$CM_LAB_DOMAIN'/g' ../httpd/panel/static/index.html
sed -i 's/@LAB_DOMAIN/'$LAB_DOMAIN'/g' ../httpd/panel/static/index.html

sed -i 's/@LAB_DOMAIN/'$LAB_DOMAIN'/g' ../registry/config/config.yml


cd ../httpd
echo '* Apache HTTPD *'

if [ $1 == "hom" ]; then

    echo "Desabilitar proxy para "$CI_LAB_DOMAIN" e "$CM_LAB_DOMAIN

    rm panel/config/sites/001-ci.conf
    rm panel/config/sites/002-cm.conf

fi

echo 'Certificar que certbot está parado'
docker stop certbot

docker-compose -f stack.yaml -f ../common/use.yaml up --detach

docker stop httpd
docker start httpd


cd ../postgresql
echo '* PostgreSQL *'

if [ $CONFIG_ENV == 'Y' ]; then
    echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
    echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env

    echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env) > ./postgres/config/.pgpass
    chmod 0600 ./postgres/config/.pgpass
    echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD_01" {print $2}' .env) > ./postgres01/config/.pgpass
    chmod 0600 ./postgres01/config/.pgpass
    echo 'localhost:5432:*:postgres:'$(awk -F'=' '$1 =="SVC_PWD_02" {print $2}' .env) > ./postgres02/config/.pgpass
    chmod 0600 ./postgres02/config/.pgpass
fi

docker-compose -f stack.yaml -f ../common/use.yaml up --detach


cd ../mongodb
echo '* MongoDB *'

if [ $CONFIG_ENV == 'Y' ]; then
    echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
    echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env

    echo 'uri: "mongodb://root:'$(awk -F'=' '$1 =="SVC_PWD" {print $2}' .env)'@localhost:27017"' > ./mongodb/config/.mdbpass
    chmod 0600 ./mongodb/config/.mdbpass
    echo 'uri: "mongodb://root:'$(awk -F'=' '$1 =="SVC_PWD_01" {print $2}' .env)'@localhost:27017"' > ./mongodb01/config/.mdbpass
    chmod 0600 ./mongodb01/config/.mdbpass
    echo 'uri: "mongodb://root:'$(awk -F'=' '$1 =="SVC_PWD_02" {print $2}' .env)'@localhost:27017"' > ./mongodb02/config/.mdbpass
    chmod 0600 ./mongodb02/config/.mdbpass
fi

docker-compose -f stack.yaml -f ../common/use.yaml up --detach


cd ../mariadb
echo '* MariaDB *'

if [ $CONFIG_ENV == 'Y' ]; then
    echo 'SVC_PWD_00='$(openssl rand -hex 8) > .env
    echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
    echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env

    echo '[client]' > mariadb/config/autologin.cnf
    echo 'user = root' >> mariadb/config/autologin.cnf
    echo 'password = '$(awk -F'=' '$1 =="SVC_PWD_00" {print $2}' .env) >> mariadb/config/autologin.cnf

    echo '[client]' > mariadb01/config/autologin.cnf
    echo 'user = root' >> mariadb01/config/autologin.cnf
    echo 'password = '$(awk -F'=' '$1 =="SVC_PWD_01" {print $2}' .env) >> mariadb01/config/autologin.cnf

    echo '[client]' > mariadb02/config/autologin.cnf
    echo 'user = root' >> mariadb02/config/autologin.cnf
    echo 'password = '$(awk -F'=' '$1 =="SVC_PWD_02" {print $2}' .env) >> mariadb02/config/autologin.cnf
fi

docker-compose -f stack.yaml -f ../common/use.yaml up --detach


cd ../redis
echo '* Redis *'

if [ $CONFIG_ENV == 'Y' ]; then
    echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    echo 'SVC_PWD_01='$(openssl rand -hex 8) >> .env
    echo 'SVC_PWD_02='$(openssl rand -hex 8) >> .env
fi

docker-compose -f stack.yaml -f ../common/use.yaml up --detach


cd ../nextcloud
echo '* Nextcloud *'

if [ $CONFIG_ENV == 'Y' ]; then
    echo 'SVC_PWD='$(openssl rand -hex 8) > .env
    echo 'REDIS_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../redis/.env) >> .env
    echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
fi

docker-compose -f stack.yaml -f ../common/use.yaml up --detach


if [ $1 == "hom" ]; then

    cd ../portainer
    echo '* Portainer *'

    docker-compose -f stack.yaml -f ../common/use.yaml up  --detach portainer_agent

else

    cd ../gitea
    echo '* Gitea *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo "Navegar até a página de configuração do serviço https://$LAB_DOMAIN/git"
        echo 'e definir a conta do administrador (no final da página, em "Optional Settings")'

        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) > .env
    fi

    docker-compose -f stack.yaml -f ../common/use.yaml up --detach


    cd ../drone
    echo '* Drone *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo "Gere uma aplicação OAuth no Gitea para o Drone em https://$LAB_DOMAIN/git"
        echo "com endereço de retorno https://$CI_LAB_DOMAIN/login"
        echo 'Após gerar a aplicação informe os dados abaixo'
        read -p 'Informe o "Client ID": ' GID
        read -p 'Informe o "Client Secret": ' GSCRT

        echo 'DRONE_TOKEN='$(openssl rand -hex 32) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
        echo 'GITEA_ID='$GID >> .env
        echo 'GITEA_PWD='$GSCRT >> .env
        echo 'SVC_PWD='$(openssl rand -hex 16) >> .env
    fi

    docker-compose -f stack.yaml -f ../common/use.yaml up --scale docker=2 --scale ssh=2 --detach --remove-orphans


    cd ../cherrybomb
    echo '* Cherrybomb *'

    docker build --tag labqs/cherrybomb --rm .


    cd ../jupyter
    echo '* Jupyter Notebook *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'SVC_DEV_PWD='$(openssl rand -hex 8) >> .env
    fi

    docker build --file Dockerfile.jupyterlab --tag labqs/jupyterlab --rm .
    docker-compose -f stack.yaml -f ../common/use.yaml up --build --detach jupyterhub
    

    cd ../semaphore
    echo '* Ansible Semaphore *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'POSTGRES_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../postgresql/.env) >> .env
    fi

    docker-compose -f stack.yaml -f ../common/use.yaml up --build --detach


    cd ../registry
    echo '* registry *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo 'REGISTRY_HTTP_SECRET='$(openssl rand -hex 8) > .env
        echo 'REDIS_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../redis/.env) >> .env

        docker run --rm --entrypoint htpasswd httpd -Bbn maint $(awk -F'=' '$1 =="REGISTRY_HTTP_SECRET" {print $2}' ./.env) > .htpasswd
    fi

    docker-compose -f stack.yaml -f ../common/use.yaml up --detach


    cd ../locust
    echo '* Locust *'

    docker-compose -f stack.yaml -f ../common/use.yaml up --scale worker=2 --detach --remove-orphans
    docker stop $(docker ps -qa -f 'name=locust*')


    cd ../portainer
    echo '* Portainer *'

    if [ $1 == "dev" ]; then
        docker-compose -f stack.yaml -f ../common/use.yaml up --detach
    else
        docker-compose -f stack.yaml -f ../common/use.yaml up  --detach portainer_agent
    fi


    cd ../openstack
    echo '* openstack *'

    if [ $CONFIG_ENV == 'Y' ]; then
        echo 'SVC_PWD='$(openssl rand -hex 8) > .env
        echo 'MARIADB_PWD='$(awk -F'=' '$1 =="SVC_PWD" {print $2}' ../mariadb/.env) >> .env
    fi

    docker-compose -f stack.yaml -f ../common/use.yaml up --build --detach

fi
